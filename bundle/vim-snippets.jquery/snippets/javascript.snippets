snippet plugin Full
	(function($) {

		$.${1:pluginName} = function(element, options) {

			//-------------------------------------------------------------------------
			// Define defaults and global vars for this scope
			//-------------------------------------------------------------------------

			var defaults = {
				foo: 'bar',
				onFoo: function() {}
			};

			var plugin = this;
			var $element = $(element);
			var element = element;

			plugin.settings = {};

			//-------------------------------------------------------------------------
			// Initialize the plugin
			//-------------------------------------------------------------------------

			plugin.init = function() {
				plugin.settings = $.extend({}, defaults, options);
				${2:// code goes here}
			};

			//-------------------------------------------------------------------------
			// Public Methods
			//-------------------------------------------------------------------------

			plugin.foo_public_method = function() {
				// code goes here
			};

			//-------------------------------------------------------------------------
			// Private Methods
			//-------------------------------------------------------------------------

			var foo_private_method = function() {
				// code goes here
			};

			plugin.init();

		};

		//---------------------------------------------------------------------------
		// Add this plugin to the jQuery fn namespace.
		//---------------------------------------------------------------------------

		$.fn.$1 = function(options) {

			return this.each(function() {
				if (undefined == $(this).data('$1')) {
					var plugin = new $.$1(this, options);
					$(this).data('$1', plugin);
				}
			});

		};

	})(jQuery);

snippet plugin Simple
	(function($) {

		$.${1:pluginName} = function(element, options) {

			var defaults = {};

			var plugin = this;
			var $element = $(element);
			var element = element;

			plugin.settings = {};

			plugin.init = function() {
				plugin.settings = $.extend({}, defaults, options);
				${2:// code goes here}
			};

			plugin.init();

		};

		$.fn.$1 = function(options) {

			return this.each(function() {
				if (undefined == $(this).data('$1')) {
					var plugin = new $.$1(this, options);
					$(this).data('$1', plugin);
				}
			});

		};

	})(jQuery);
	

snippet plugin.public
	plugin.${1:public_method_name} = function() {
		${2:// code goes here}
	};
	${3}
snippet plugin.private
	var ${1:private_method} = function() {
		${2:// code goes here}
	};
	${3}
snippet closure Custom
	(function(${1:parameters}) {
	  // code goes here.
	}(${2:arguments});
snippet closure $
	(function($, undefined) {
	  // code goes here.
	}(jQuery);
